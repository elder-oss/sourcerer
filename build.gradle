buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.1"
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'io.codearte.nexus-staging'

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

nexusStaging {
    packageGroup = "org.elder.sourcerer2"
    username = ossrhUsername
    password = ossrhPassword
}

if ("$enable_signing" == 'true') {
    project.ext.set("use_signing", true)
    project.ext.set("signing.keyId", sourcerer_signing_keyId)
    project.ext.set("signing.password", sourcerer_signing_password)
    project.ext.set("signing.secretKeyRingFile", sourcerer_signing_secretKeyRingFile)
}

sonarqube {
    properties {
        property "sonar.projectVersion", getVersionName()
        property "sonar.jacoco.reportPath", "build/coverage/jacoco.exec"
        property "sonar.analysis.mode", "preview"
        property "sonar.host.url", sourcerer_sonar_host_url
        property "sonar.login", sourcerer_sonar_login
        property "sonar.github.oauth", sourcerer_sonar_github_oauth
        property "sonar.github.repository", "elder-oss/sourcerer"
    }
}

subprojects {
    group = 'org.elder.sourcerer2'
    version = getVersionName()

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    checkstyle {
        configFile = new File(rootDir, "infra/codehealth/checkstyle.xml")
        toolVersion = "7.1.1"
        ignoreFailures = false
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jacoco {
        reportsDir = file("build/coverage/jacoco.exec")
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        api 'org.jetbrains:annotations:15.0'
        api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.hamcrest:hamcrest-all:1.3'
        testImplementation 'org.mockito:mockito-core:1.10.19'
        testImplementation 'org.powermock:powermock-mockito-release-full:1.6.4'
        testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    }

    test {
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    task downloadDependencies(type: Copy) {
        from configurations.testRuntime
        into 'build/tmp/dependencieshack/'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }

        repositories {
            mavenLocal()
        }
    }

    signing {
        required { "$enable_signing" == 'true' }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'Elder Sourcerer'
                    packaging 'jar'
                    description 'An opinionated framework for implementing an CQRS architecture using event sourcing'
                    url 'https://github.com/elder-oss/sourcerer'

                    scm {
                        connection 'scm:git:https://github.com/elder-oss/sourcerer.git'
                        developerConnection 'scm:svn:https://github.com/elder-oss/sourcerer.git'
                        url 'https://github.com/elder-oss/sourcerer'
                    }

                    licenses {
                        license {
                            name 'The MIT License (MIT)'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }

                    developers {
                        developer {
                            id 'elder-developers'
                            name 'Developers At Elder'
                            email 'tech@elder.org'
                        }
                    }
                }
            }
        }
    }
}
